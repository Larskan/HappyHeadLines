
services:
  # ---------- SQL Server ----------
  # run: docker-compose up -d (to auto load .env file)
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: ${ACCEPT_EULA}
    ports:
      - "1435:1433"
    healthcheck:
      test: ["CMD", "bash", "-c", "</dev/tcp/localhost/1433"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - mssql-data:/var/opt/mssql

  # ---------- ArticleService with 3 replicas ----------
  article-service:
    build:
      context: .
      dockerfile: /src/ArticleService/Dockerfile
    image: happyheadlines/article-service:${IMAGE_TAG}
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${ARTICLE_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    # deploy:
    #   replicas: 3
    ports:
      - "8080"

  # ---------- Other services (single replica each) ----------
  draft-service:
    build:
      context: .
      dockerfile: /src/DraftService/Dockerfile
    image: happyheadlines/draft-service
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${DRAFT_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8010:8080"

  publisher-service:
    build:
      context: .
      dockerfile: /src/PublisherService/Dockerfile
    image: happyheadlines/publisher-service
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${PUBLISHER_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8020:8080"
  comment-service:
    build:
      context: .
      dockerfile: /src/CommentService/Dockerfile
    image: happyheadlines/comment-service
    depends_on:
      - sqlserver
      - profanity-service
    environment:
      DATABASE_NAME: ${COMMENT_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8033:8080"
     
  subscriber-service:
    build:
      context: .
      dockerfile: /src/SubscriberService/Dockerfile
    image: happyheadlines/subscriber-service
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${SUBSCRIBER_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8050:8080"
  
  profanity-service:
    build:
      context: .
      dockerfile: /src/ProfanityService/Dockerfile
    image: happyheadlines/profanity-service
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${PROFANITY_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8060:8080"

  newsletter-service:
    build:
      context: .
      dockerfile: /src/NewsletterService/Dockerfile
    image: happyheadlines/newsletter-service
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      DATABASE_NAME: ${NEWSLETTER_DB}
      SA_PASSWORD: ${SA_PASSWORD}
    ports:
      - "8040:8080"
# ------- RABBITMQ ---------
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" #AMQP Protocol
      - "15672:15672" #Management UI

# -------- Zipkin -------
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411" # Zipkin ui at http://localhost:9411
  

# ---- SEQ ----
  # seq:
  #   image: datalust/seq:latest
  #   container_name: seq
  #   restart: always
  #   ports:
  #     - "5341:80" # Seq UI at http://localhost:5341
  #   environment:
  #     ACCEPT_EULA: "Y"
  #   volumes:
  #     - seq-data:/data

# ----- REDIS -----
  redis:
    image: redis:7
    ports: 
      - "6379:6379"
      # maxmemory keeps redis bounded. allkeys-lru ensures oldest unused keys are evicted automatically
    command: ["redis-server", "--maxmemory", "100mb", "--maxmemory-policy", "allkeys-lru"]

# ------------- PROMETHEUS -------------
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - comment-service
      - article-service
  
# ------------- GRAFANA -------------
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  mssql-data:
  # seq-data:
